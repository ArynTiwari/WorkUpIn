// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = "mongodb+srv://aryan:aryan123@workup.nnhxxqp.mongodb.net/workup?retryWrites=true&w=majority"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    CLIENT
    TALENT
    ADMIN
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    details       UserDetails[]
    accounts      Account[]
    sessions      Session[]
    blogs         Blog[]
    projects      Project[]
}

model UserDetails {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    user      User   @relation(fields: [detailId], references: [id])
    detailId  String @db.ObjectId
    firstName String
    lastName  String
    password  String
    role      Role   @default(TALENT)
    about     String
    gender    String
    zip       Int    @db.Int
    city      String
    state     String
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    desc      String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String   @db.ObjectId
    createdAt DateTime @updatedAt
    category  String[]
}

model Project {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    desc      String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String   @db.ObjectId
    createdAt DateTime @updatedAt
    amount    String
    level     String
    category  String[]
}

model Chat {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @updatedAt
}

type Address {
    street String
    city   String
    state  String
    zip    String
}
